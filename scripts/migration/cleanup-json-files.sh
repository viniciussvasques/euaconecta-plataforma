#!/bin/bash

# Script para limpar arquivos JSON ap√≥s migra√ß√£o bem-sucedida
# Uso: ./cleanup-json-files.sh [--backup] [--force]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${2:-$NC}$1${NC}"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    log "‚ùå Execute este script a partir da raiz do projeto" $RED
    exit 1
fi

# Verificar se a migra√ß√£o foi bem-sucedida
log "üîç Verificando se a migra√ß√£o foi bem-sucedida..." $BLUE

# Executar verifica√ß√£o
node scripts/migration/verify-migration.js

if [ $? -ne 0 ]; then
    log "‚ùå Migra√ß√£o n√£o foi bem-sucedida. N√£o √© seguro remover os arquivos JSON." $RED
    exit 1
fi

# Criar backup se solicitado
if [[ "$*" == *"--backup"* ]]; then
    log "üì¶ Criando backup dos arquivos JSON..." $BLUE

    BACKUP_DIR="backups/json-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$BACKUP_DIR"

    cp data/blog.json "$BACKUP_DIR/" 2>/dev/null || true
    cp data/partners.json "$BACKUP_DIR/" 2>/dev/null || true
    cp data/tutorials.json "$BACKUP_DIR/" 2>/dev/null || true
    cp data/customization.json "$BACKUP_DIR/" 2>/dev/null || true

    log "‚úÖ Backup criado em: $BACKUP_DIR" $GREEN
fi

# Confirmar remo√ß√£o
if [[ "$*" != *"--force"* ]]; then
    log "‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√° remover os arquivos JSON!" $YELLOW
    log "Arquivos que ser√£o removidos:" $YELLOW
    log "  - data/blog.json" $YELLOW
    log "  - data/partners.json" $YELLOW
    log "  - data/tutorials.json" $YELLOW
    log "  - data/customization.json" $YELLOW
    log "" $YELLOW
    read -p "Tem certeza que deseja continuar? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log "‚ùå Opera√ß√£o cancelada" $RED
        exit 1
    fi
fi

# Remover arquivos JSON
log "üóëÔ∏è  Removendo arquivos JSON..." $BLUE

rm -f data/blog.json
rm -f data/partners.json
rm -f data/tutorials.json
rm -f data/customization.json

# Verificar se foram removidos
if [ ! -f "data/blog.json" ] && [ ! -f "data/partners.json" ] && [ ! -f "data/tutorials.json" ] && [ ! -f "data/customization.json" ]; then
    log "‚úÖ Arquivos JSON removidos com sucesso!" $GREEN
else
    log "‚ùå Erro ao remover alguns arquivos" $RED
    exit 1
fi

# Atualizar APIs que usam arquivos JSON
log "üîÑ Atualizando APIs para usar banco de dados..." $BLUE

# Listar APIs que precisam ser atualizadas
log "üìã APIs que precisam ser atualizadas:" $YELLOW
log "  - /api/blog/route.ts" $YELLOW
log "  - /api/blog/[slug]/route.ts" $YELLOW
log "  - /api/admin/partners/route.ts" $YELLOW
log "  - /api/admin/tutorials/route.ts" $YELLOW
log "  - /api/customization/route.ts" $YELLOW

log "‚úÖ Limpeza conclu√≠da!" $GREEN
log "üöÄ Pr√≥ximos passos:" $BLUE
log "  1. Atualize as APIs para usar banco de dados" $YELLOW
log "  2. Teste todas as funcionalidades" $YELLOW
log "  3. Remova refer√™ncias aos arquivos JSON" $YELLOW
