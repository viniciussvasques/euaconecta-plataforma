import { NextRequest, NextResponse } from 'next/server'
import { validateRequest, createSuccessResponse, createErrorResponse } from '@/lib/validation/api-validators'
import { withErrorHandler } from '@/lib/errors/api-error-handler'
import { createGeneralRateLimit } from '@/lib/security/rate-limiter'
import { logger } from '@/lib/logging/api-logger'
import { prisma } from '@/lib/database/prisma'
import { EventService, SystemEvent } from '@/lib/utils/events'
import { verifyAccessToken } from '@/lib/auth/jwt'
type MinimalSession = { userId: string; role: string }

export const POST = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    // Verificar sessão via cookie
    const sessionCookie = request.cookies.get('session')
    if (!sessionCookie) {
      return NextResponse.json({ success: false, error: 'Não autorizado' }, { status: 401 })
    }
    let session: MinimalSession | null = null
    try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
      const payload = await verifyAccessToken(sessionCookie.value)
      session = { userId: String(payload.sub || ''), role: String((payload as unknown as { role?: string }).role || '') }
    } catch {
      try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request) session = JSON.parse(sessionCookie.value) as MinimalSession } catch { session = null }
    }
    if (!session || !session.userId || !['ADMIN', 'SUPER_ADMIN', 'OPERATOR'].includes(session.role)) {
      return NextResponse.json({ success: false, error: 'Acesso negado' }, { status: 403 })
    }

    const { id } = await params
    const body = await request.json()
    const { confirmedWeightGrams, confirmationPhoto, packageCondition, notes } = body

    // Validar campos obrigatórios
    if (!confirmedWeightGrams) {
      return NextResponse.json(
        { success: false, error: 'Peso confirmado é obrigatório' },
        { status: 400 }
      )
    }

    // Verificar se o pacote existe
    const existingPackage = await prisma.package.findUnique({
      where: { id }
    })

    if (!existingPackage) {
      return NextResponse.json(
        { success: false, error: 'Pacote não encontrado' },
        { status: 404 }
      )
    }

    // Verificar se o pacote ainda está pendente
    if (existingPackage.status !== 'PENDING') {
      return NextResponse.json(
        { success: false, error: 'Pacote já foi processado' },
        { status: 400 }
      )
    }

    // Atualizar o pacote com confirmação
    const updatedPackage = await prisma.package.update({
      where: { id },
      data: {
        status: 'RECEIVED',
        confirmedWeightGrams: parseInt(confirmedWeightGrams),
        confirmationPhoto,
        packageCondition,
        notes: notes || existingPackage.notes,
        confirmedAt: new Date(),
        confirmedBy: session.userId,
        // Atualizar o peso declarado pelo cliente se necessário
        weightGrams: parseInt(confirmedWeightGrams)
      },
      include: {
        owner: {
          select: {
            name: true,
            email: true,
            suiteNumber: true
          }
        }
      }
    })

    // Emitir evento de pacote recebido
    await EventService.emit(SystemEvent.PACKAGE_RECEIVED, {
      userId: existingPackage.ownerId,
      entityType: 'Package',
      entityId: id,
      metadata: {
        weight: confirmedWeightGrams,
        description: updatedPackage.description,
        packageCondition: packageCondition
      }
    })

    return NextResponse.json({
      success: true,
      data: updatedPackage,
      message: 'Pacote confirmado com sucesso'
    })

  } catch (error) {
    console.error('Erro ao confirmar pacote:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
