import { NextRequest, NextResponse } from 'next/server'
import { validateRequest, createSuccessResponse, createErrorResponse } from '@/lib/validation/api-validators'
import { withErrorHandler } from '@/lib/errors/api-error-handler'
import { createGeneralRateLimit } from '@/lib/security/rate-limiter'
import { logger } from '@/lib/logging/api-logger'
import fs from 'fs'
import path from 'path'
import { BlogPost } from '@/lib/blog/blog-types'

const BLOG_FILE = path.join(process.cwd(), 'data', 'blog.json')

export const GET = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ slug: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const { slug } = await params

    if (!fs.existsSync(BLOG_FILE)) {
      return NextResponse.json(
        { success: false, error: 'Post não encontrado' },
        { status: 404 }
      )
    }

    const posts: BlogPost[] = JSON.parse(fs.readFileSync(BLOG_FILE, 'utf8'))
    const post = posts.find(p => p.slug === slug && p.status === 'published')

    if (!post) {
      return NextResponse.json(
        { success: false, error: 'Post não encontrado' },
        { status: 404 }
      )
    }

    // Incrementar visualizações
    post.views += 1
    fs.writeFileSync(BLOG_FILE, JSON.stringify(posts, null, 2))

    return NextResponse.json({
      success: true,
      data: post
    }, {
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    })
  } catch (error) {
    console.error('Erro ao buscar post:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

export const PUT = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ slug: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const { slug } = await params
    const body = await request.json()

    if (!fs.existsSync(BLOG_FILE)) {
      return NextResponse.json(
        { success: false, error: 'Post não encontrado' },
        { status: 404 }
      )
    }

    const posts: BlogPost[] = JSON.parse(fs.readFileSync(BLOG_FILE, 'utf8'))
    const postIndex = posts.findIndex(p => p.slug === slug)

    if (postIndex === -1) {
      return NextResponse.json(
        { success: false, error: 'Post não encontrado' },
        { status: 404 }
      )
    }

    // Atualizar post
    posts[postIndex] = {
      ...posts[postIndex],
      ...body,
      updatedAt: new Date().toISOString(),
      publishedAt: body.status === 'published' && posts[postIndex].status !== 'published'
        ? new Date().toISOString()
        : posts[postIndex].publishedAt
    }

    fs.writeFileSync(BLOG_FILE, JSON.stringify(posts, null, 2))

    return NextResponse.json({
      success: true,
      data: posts[postIndex],
      message: 'Post atualizado com sucesso'
    })
  } catch (error) {
    console.error('Erro ao atualizar post:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

export const DELETE = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ slug: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const { slug } = await params

    if (!fs.existsSync(BLOG_FILE)) {
      return NextResponse.json(
        { success: false, error: 'Post não encontrado' },
        { status: 404 }
      )
    }

    const posts: BlogPost[] = JSON.parse(fs.readFileSync(BLOG_FILE, 'utf8'))
    const postIndex = posts.findIndex(p => p.slug === slug)

    if (postIndex === -1) {
      return NextResponse.json(
        { success: false, error: 'Post não encontrado' },
        { status: 404 }
      )
    }

    // Remover post
    const deletedPost = posts.splice(postIndex, 1)[0]
    fs.writeFileSync(BLOG_FILE, JSON.stringify(posts, null, 2))

    return NextResponse.json({
      success: true,
      data: deletedPost,
      message: 'Post excluído com sucesso'
    })
  } catch (error) {
    console.error('Erro ao excluir post:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
