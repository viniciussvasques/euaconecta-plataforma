import { NextRequest, NextResponse } from 'next/server'
import { validateRequest, createSuccessResponse, createErrorResponse } from '@/lib/validation/api-validators'
import { withErrorHandler } from '@/lib/errors/api-error-handler'
import { createGeneralRateLimit } from '@/lib/security/rate-limiter'
import { logger } from '@/lib/logging/api-logger'
import { getBlogPostBySlug } from '@/lib/blog/blog-service'

export const POST = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ slug: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const { slug } = await params

    if (!slug) {
      return NextResponse.json({ success: false, error: 'Slug é obrigatório' }, { status: 400 })
    }

    // Buscar o post
    const post = await getBlogPostBySlug(slug)
    if (!post) {
      return NextResponse.json({ success: false, error: 'Post não encontrado' }, { status: 404 })
    }

    // Incrementar curtidas (simulação - em produção seria no banco)
    const newLikes = post.likes + 1

    // Aqui você salvaria no banco de dados
    // await updateBlogPostLikes(slug, newLikes)

    return NextResponse.json({
      success: true,
      data: {
        likes: newLikes
      }
    })

  } catch (error) {
    console.error('Erro ao curtir post:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
