import { NextRequest, NextResponse } from 'next/server'
import { validateRequest, createSuccessResponse, createErrorResponse } from '@/lib/validation/api-validators'
import { withErrorHandler } from '@/lib/errors/api-error-handler'
import { createGeneralRateLimit } from '@/lib/security/rate-limiter'
import { logger } from '@/lib/logging/api-logger'
import { ConsolidationService } from '@/lib/consolidation/consolidation'

export const POST = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const { id } = await params
    const { packageId } = await request.json()

    if (!id || !packageId) {
      return NextResponse.json(
        { success: false, error: 'ID da consolidação e ID do pacote são obrigatórios' },
        { status: 400 }
      )
    }

    const consolidationService = new ConsolidationService()
    const result = await consolidationService.removePackageFromBox(id, packageId)

    if (!result) {
      return NextResponse.json(
        { success: false, error: 'Erro ao remover pacote da caixa' },
        { status: 500 }
      )
    }

    return NextResponse.json({
      success: true,
      data: result,
      message: 'Pacote removido da caixa com sucesso'
    })
  } catch (error) {
    console.error('Erro ao remover pacote da caixa:', error)
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro interno do servidor' 
      },
      { status: 500 }
    )
  }
}
