import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/database/prisma'
import { EmailService } from '@/lib/email/email'
import { NotificationService } from '@/lib/email/notifications'
import { NotificationType } from '@prisma/client'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { sessionId, consolidationId } = body

    if (!sessionId || !consolidationId) {
      return NextResponse.json(
        { success: false, error: 'ID da sessão e consolidação são obrigatórios' },
        { status: 400 }
      )
    }

    // Buscar informações da sessão do Stripe para obter o paymentId
    const stripeResponse = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/stripe/check-session?session_id=${sessionId}`)
    const stripeData = await stripeResponse.json()
    
    if (!stripeData.success) {
      return NextResponse.json(
        { success: false, error: 'Erro ao verificar sessão do Stripe' },
        { status: 400 }
      )
    }

    const paymentId = stripeData.session.metadata?.paymentId
    if (!paymentId) {
      return NextResponse.json(
        { success: false, error: 'ID do pagamento não encontrado na sessão' },
        { status: 400 }
      )
    }

    // Buscar o pagamento pelo ID
    const payment = await prisma.payment.findUnique({
      where: { id: paymentId },
      include: {
        user: true
      }
    })

    if (!payment) {
      return NextResponse.json(
        { success: false, error: 'Pagamento não encontrado' },
        { status: 404 }
      )
    }

    // Buscar a consolidação
    const consolidation = await prisma.consolidationGroup.findUnique({
      where: { id: consolidationId },
      include: {
        user: true
      }
    })

    if (!consolidation) {
      return NextResponse.json(
        { success: false, error: 'Consolidação não encontrada' },
        { status: 404 }
      )
    }

    // Atualizar status do pagamento para succeeded
    await prisma.payment.update({
      where: { id: payment.id },
      data: {
        status: 'succeeded',
        updatedAt: new Date()
      }
    })

    // Atualizar status da consolidação para IN_PROGRESS (pago e em processamento)
    await prisma.consolidationGroup.update({
      where: { id: consolidationId },
      data: {
        status: 'IN_PROGRESS',
        updatedAt: new Date()
      }
    })

    // Criar registro de envio
    await prisma.shipment.create({
      data: {
        userId: payment.userId,
        status: 'DRAFT',
        outboundCarrier: 'ABC Packet', // Transportadora padrão
        outboundService: 'Standard',
        totalWeightGrams: consolidation.finalWeightGrams || 0,
        toName: consolidation.user?.name || '',
        toLine1: 'Endereço do usuário', // TODO: Implementar endereço de entrega
        toLine2: '',
        toCity: 'Cidade',
        toState: 'Estado',
        toPostalCode: '00000-000',
        toCountry: 'BR',
      }
    })

    // Enviar email de confirmação
    if (payment.user) {
      await EmailService.sendMail({
        to: payment.user.email,
        subject: '✅ Pagamento Confirmado - Euaconecta',
        html: EmailService.paymentConfirmationEmail(
          payment.user.name,
          Number(payment.amountCents) / 100,
          payment.providerCode === 'STRIPE' ? 'Cartão de Crédito/Débito' : 'PayPal',
          payment.id
        )
      })
    }

    // Criar notificação para o usuário
    await NotificationService.create({
      userId: payment.userId,
      type: NotificationType.IN_APP,
      title: 'Pagamento Confirmado',
      message: `Seu pagamento de $${(Number(payment.amountCents) / 100).toFixed(2)} foi confirmado. Sua caixa está sendo processada.`,
    })

    // Notificar administradores
    await NotificationService.notifyAdmins({
      type: NotificationType.IN_APP,
      title: 'Novo Pagamento Recebido',
      message: `Pagamento de $${(Number(payment.amountCents) / 100).toFixed(2)} confirmado para consolidação ${consolidationId}`,
    })

    return NextResponse.json({
      success: true,
      message: 'Pagamento confirmado e consolidação atualizada',
      data: {
        paymentId: payment.id,
        consolidationId: consolidation.id,
        status: 'IN_PROGRESS'
      }
    })

  } catch (error) {
    console.error('Erro ao confirmar pagamento:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
