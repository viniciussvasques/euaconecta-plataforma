import { NextRequest, NextResponse } from 'next/server'
import { validateRequest, createSuccessResponse, createErrorResponse } from '@/lib/validation/api-validators'
import { withErrorHandler } from '@/lib/errors/api-error-handler'
import { createGeneralRateLimit } from '@/lib/security/rate-limiter'
import { logger } from '@/lib/logging/api-logger'
import fs from 'fs'
import path from 'path'

const PARTNERS_FILE = path.join(process.cwd(), 'data', 'partners.json')

// Garantir que o diretório existe
const ensureDataDir = () => {
  const dataDir = path.join(process.cwd(), 'data')
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true })
  }
}

// Dados iniciais dos parceiros
const defaultPartners = [
  {
    id: 'nike',
    name: 'Nike',
    logo: '/brands/nike.svg',
    link: 'https://placeholder.com',
    description: 'Calçados, roupas e equipamentos esportivos',
    category: 'Fashion',
    isActive: true,
    order: 1,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: 'adidas',
    name: 'Adidas',
    logo: '/brands/adidas.svg',
    link: 'https://placeholder.com',
    description: 'Calçados e roupas esportivas',
    category: 'Fashion',
    isActive: true,
    order: 2,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: 'amazon',
    name: 'Amazon',
    logo: '/brands/amazon.svg',
    link: 'https://placeholder.com',
    description: 'Marketplace com milhões de produtos',
    category: 'Marketplace',
    isActive: true,
    order: 3,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: 'apple',
    name: 'Apple',
    logo: '/brands/apple.svg',
    link: 'https://placeholder.com',
    description: 'Produtos Apple: iPhone, Mac, iPad',
    category: 'Electronics',
    isActive: true,
    order: 4,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: 'bestbuy',
    name: 'Best Buy',
    logo: '/brands/bestbuy.svg',
    link: 'https://placeholder.com',
    description: 'Eletrônicos e tecnologia',
    category: 'Electronics',
    isActive: true,
    order: 5,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: 'target',
    name: 'Target',
    logo: '/brands/target.svg',
    link: 'https://placeholder.com',
    description: 'Loja de departamentos',
    category: 'Retail',
    isActive: true,
    order: 6,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: 'walmart',
    name: 'Walmart',
    logo: '/brands/walmart.svg',
    link: 'https://placeholder.com',
    description: 'Supermercado e produtos diversos',
    category: 'Retail',
    isActive: true,
    order: 7,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: 'samsung',
    name: 'Samsung',
    logo: '/brands/samsung.svg',
    link: 'https://placeholder.com',
    description: 'Eletrônicos Samsung',
    category: 'Electronics',
    isActive: true,
    order: 8,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }
]

export const GET = withErrorHandler(async() {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    ensureDataDir()

    let partners = defaultPartners

    // Tentar carregar parceiros salvos
    if (fs.existsSync(PARTNERS_FILE)) {
      try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
        const savedPartners = JSON.parse(fs.readFileSync(PARTNERS_FILE, 'utf8'))
        partners = savedPartners
      } catch (error) {
        console.error('Erro ao ler arquivo de parceiros:', error)
      }
    } else {
      // Criar arquivo inicial
      fs.writeFileSync(PARTNERS_FILE, JSON.stringify(defaultPartners, null, 2))
    }

    return NextResponse.json({
      success: true,
      data: partners
    }, {
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    })
  } catch (error) {
    console.error('Erro ao buscar parceiros:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

export const POST = withErrorHandler(async(request: NextRequest) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const body = await request.json()

    ensureDataDir()

    // Carregar parceiros existentes
    let partners = defaultPartners
    if (fs.existsSync(PARTNERS_FILE)) {
      partners = JSON.parse(fs.readFileSync(PARTNERS_FILE, 'utf8'))
    }

    // Adicionar novo parceiro
    const newPartner = {
      id: body.id || `partner-${Date.now()}`,
      name: body.name,
      logo: body.logo,
      link: body.link,
      description: body.description,
      category: body.category,
      isActive: body.isActive !== false,
      order: body.order || partners.length + 1,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }

    partners.push(newPartner)

    // Salvar no arquivo
    fs.writeFileSync(PARTNERS_FILE, JSON.stringify(partners, null, 2))

    return NextResponse.json({
      success: true,
      data: newPartner,
      message: 'Parceiro criado com sucesso'
    })
  } catch (error) {
    console.error('Erro ao criar parceiro:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
