import { NextRequest, NextResponse } from 'next/server'
import { validateRequest, createSuccessResponse, createErrorResponse } from '@/lib/validation/api-validators'
import { withErrorHandler } from '@/lib/errors/api-error-handler'
import { createGeneralRateLimit } from '@/lib/security/rate-limiter'
import { logger } from '@/lib/logging/api-logger'
import { prisma } from '@/lib/database/prisma'

export const GET = withErrorHandler(async() {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const testimonials = await prisma.testimonial.findMany({
      orderBy: { order: 'asc' }
    })

    return NextResponse.json({ success: true, data: testimonials })
  } catch (error) {
    console.error('Erro ao buscar depoimentos:', error)
    return NextResponse.json({ success: false, error: 'Erro interno do servidor' }, { status: 500 })
  }
}

export const POST = withErrorHandler(async(request: NextRequest) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const body = await request.json()

    const testimonial = await prisma.testimonial.create({
      data: {
        name: body.name,
        role: body.role,
        company: body.company,
        content: body.content,
        rating: body.rating,
        avatar: body.avatar,
        isActive: body.isActive,
        order: body.order
      }
    })

    return NextResponse.json({ success: true, data: testimonial })
  } catch (error) {
    console.error('Erro ao criar depoimento:', error)
    return NextResponse.json({ success: false, error: 'Erro interno do servidor' }, { status: 500 })
  }
}
