import { NextRequest, NextResponse } from 'next/server'
import { validateRequest, createSuccessResponse, createErrorResponse } from '@/lib/validation/api-validators'
import { withErrorHandler } from '@/lib/errors/api-error-handler'
import { createGeneralRateLimit } from '@/lib/security/rate-limiter'
import { logger } from '@/lib/logging/api-logger'
import { carrierService } from '@/lib/freight/carriers'

export const GET = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const { id } = await params
    const carrier = await carrierService.getById(id)
    
    if (!carrier) {
      return NextResponse.json(
        { success: false, error: 'Transportadora não encontrada' },
        { status: 404 }
      )
    }
    
    return NextResponse.json({
      success: true,
      data: carrier
    })
  } catch (error) {
    console.error('Erro ao buscar transportadora:', error)
    
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

export const PUT = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const { id } = await params
    const data = await request.json()
    
    // Validar dados obrigatórios
    if (!data.name || !data.code) {
      return NextResponse.json(
        { success: false, error: 'Nome e código são obrigatórios' },
        { status: 400 }
      )
    }

    // Atualizar transportadora
    const carrier = await carrierService.update(id, data)
    
    return NextResponse.json({
      success: true,
      data: carrier
    })
  } catch (error) {
    console.error('Erro ao atualizar transportadora:', error)
    
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

export const DELETE = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const { id } = await params
    await carrierService.delete(id)
    
    return NextResponse.json({
      success: true,
      message: 'Transportadora excluída com sucesso'
    })
  } catch (error) {
    console.error('Erro ao deletar transportadora:', error)
    
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
