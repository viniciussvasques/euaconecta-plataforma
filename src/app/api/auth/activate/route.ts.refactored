import { NextRequest, NextResponse } from 'next/server'
import { validateRequest, createSuccessResponse, createErrorResponse } from '@/lib/validation/api-validators'
import { withErrorHandler } from '@/lib/errors/api-error-handler'
import { createGeneralRateLimit } from '@/lib/security/rate-limiter'
import { logger } from '@/lib/logging/api-logger'
import { prisma } from '@/lib/database/prisma'
import { EmailService } from '@/lib/email/email'

export const GET = withErrorHandler(async(request: NextRequest) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const { searchParams } = new URL(request.url)
    const token = searchParams.get('token')

    if (!token) {
      return NextResponse.json({ success: false, error: 'Token ausente' }, { status: 400 })
    }

    const user = await prisma.user.findFirst({
      where: {
        activationToken: token,
        activationTokenExpires: { gt: new Date() }
      }
    })

    if (!user) {
      return NextResponse.json({ success: false, error: 'Token inválido ou expirado' }, { status: 400 })
    }

    await prisma.user.update({
      where: { id: user.id },
      data: {
        isActive: true,
        activationToken: null,
        activationTokenExpires: null
      }
    })

    // Enviar e-mail de boas-vindas
    try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
      if (process.env.EMAIL_NOTIFICATIONS !== 'false') {
        const welcome = EmailService.welcomeEmail(user.name, user.email)
        await EmailService.sendMail(welcome)
      }
    } catch (e) {
      console.error('Falha ao enviar email de boas-vindas:', e)
    }

    // Redirecionar para a página de sucesso
    const redirectUrl = `${process.env.NEXT_PUBLIC_APP_URL}/auth/activated`
    return NextResponse.redirect(redirectUrl)
  } catch (error) {
    console.error('Erro ao ativar conta:', error)
    return NextResponse.json({ success: false, error: 'Erro interno do servidor' }, { status: 500 })
  }
}


