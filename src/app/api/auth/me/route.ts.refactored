import { NextRequest, NextResponse } from 'next/server'
import { validateRequest, createSuccessResponse, createErrorResponse } from '@/lib/validation/api-validators'
import { withErrorHandler } from '@/lib/errors/api-error-handler'
import { createGeneralRateLimit } from '@/lib/security/rate-limiter'
import { logger } from '@/lib/logging/api-logger'
import { verifyAccessToken } from '@/lib/auth/jwt'
import { prisma } from '@/lib/database/prisma'

export const GET = withErrorHandler(async(request: NextRequest) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const sessionCookie = request.cookies.get('session')?.value
    if (!sessionCookie) return NextResponse.json({ success: false, error: 'Não autenticado' }, { status: 401 })

    // Tenta JWT
    let userId: string | null = null
    try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
      const payload = await verifyAccessToken(sessionCookie)
      userId = String(payload.sub || '')
    } catch {
      // Legacy JSON cookie
      try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
        const legacy = JSON.parse(sessionCookie)
        userId = legacy?.userId || null
      } catch {}
    }

    if (!userId) return NextResponse.json({ success: false, error: 'Não autenticado' }, { status: 401 })

    const user = await prisma.user.findUnique({ where: { id: userId } })

    if (!user) {
      return NextResponse.json(
        { success: false, error: 'Usuário não encontrado' },
        { status: 404 }
      )
    }

    return NextResponse.json({
      success: true,
      data: {
        userId: user.id,
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
        permissions: user.permissions || [],
        canManageUsers: user.canManageUsers || false,
        canManageConsolidations: user.canManageConsolidations || false,
        canManagePackages: user.canManagePackages || false,
        canManageCarriers: user.canManageCarriers || false,
        canViewFinancials: user.canViewFinancials || false,
        canManageSettings: user.canManageSettings || false,
        cpf: user.cpf || null,
        phone: user.phone || null,
        suiteNumber: user.suiteNumber || null,
        createdAt: user.createdAt,
        lastLogin: user.lastLogin || null,
      }
    })
  } catch (error) {
    console.error('Erro ao verificar sessão:', error)

    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
