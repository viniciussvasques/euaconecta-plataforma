import { NextRequest, NextResponse } from 'next/server'
import { validateRequest, createSuccessResponse, createErrorResponse } from '@/lib/validation/api-validators'
import { withErrorHandler } from '@/lib/errors/api-error-handler'
import { createGeneralRateLimit } from '@/lib/security/rate-limiter'
import { logger } from '@/lib/logging/api-logger'
import { prisma } from '@/lib/database/prisma'
import { getSession } from '@/lib/auth/session'

export const GET = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const { id } = await params

    const evaluation = await prisma.userEvaluation.findFirst({
      where: { userId: id },
      orderBy: { evaluationDate: 'desc' }
    })

    if (!evaluation) {
      return NextResponse.json({ success: true, data: null })
    }

    return NextResponse.json({ 
      success: true, 
      data: {
        ...evaluation,
        overallScore: Number(evaluation.overallScore)
      }
    })
  } catch (error) {
    console.error('Erro ao buscar avaliação do usuário:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

export const POST = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const session = await getSession()
    if (!session?.userId) {
      return NextResponse.json(
        { success: false, error: 'Não autenticado' },
        { status: 401 }
      )
    }

    const { id } = await params
    const body = await request.json()

    const {
      communicationScore,
      punctualityScore,
      packageCareScore,
      cooperationScore,
      problemResolutionScore,
      loyaltyScore,
      strengths,
      weaknesses,
      recommendations
    } = body

    // Validar scores (0-10)
    const scores = [
      communicationScore,
      punctualityScore,
      packageCareScore,
      cooperationScore,
      problemResolutionScore,
      loyaltyScore
    ]

    if (scores.some(score => score < 0 || score > 10)) {
      return NextResponse.json(
        { success: false, error: 'Scores devem estar entre 0 e 10' },
        { status: 400 }
      )
    }

    // Calcular nota geral
    const overallScore = scores.reduce((sum, score) => sum + score, 0) / scores.length

    const evaluation = await prisma.userEvaluation.create({
      data: {
        userId: id,
        communicationScore,
        punctualityScore,
        packageCareScore,
        cooperationScore,
        problemResolutionScore,
        loyaltyScore,
        overallScore,
        strengths,
        weaknesses,
        recommendations,
        evaluatedBy: session?.userId
      }
    })

    return NextResponse.json({ 
      success: true, 
      data: {
        ...evaluation,
        overallScore: Number(evaluation.overallScore)
      }
    })
  } catch (error) {
    console.error('Erro ao criar avaliação do usuário:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

export const PUT = withErrorHandler(async(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)

    // Log da request
    logger.logRequest(request, requestId)
    // Aplicar rate limiting
    const rateLimit = createGeneralRateLimit()
    rateLimit(request)
    const session = await getSession()
    if (!session?.userId) {
      return NextResponse.json(
        { success: false, error: 'Não autenticado' },
        { status: 401 }
      )
    }

    const { id } = await params
    const body = await request.json()

    const {
      communicationScore,
      punctualityScore,
      packageCareScore,
      cooperationScore,
      problemResolutionScore,
      loyaltyScore,
      strengths,
      weaknesses,
      recommendations
    } = body

    // Validar scores (0-10)
    const scores = [
      communicationScore,
      punctualityScore,
      packageCareScore,
      cooperationScore,
      problemResolutionScore,
      loyaltyScore
    ]

    if (scores.some(score => score < 0 || score > 10)) {
      return NextResponse.json(
        { success: false, error: 'Scores devem estar entre 0 e 10' },
        { status: 400 }
      )
    }

    // Calcular nota geral
    const overallScore = scores.reduce((sum, score) => sum + score, 0) / scores.length

    const evaluation = await prisma.userEvaluation.updateMany({
      where: { userId: id },
      data: {
        communicationScore,
        punctualityScore,
        packageCareScore,
        cooperationScore,
        problemResolutionScore,
        loyaltyScore,
        overallScore,
        strengths,
        weaknesses,
        recommendations,
        evaluatedBy: session?.userId
      }
    })

    if (evaluation.count === 0) {
      return NextResponse.json(
        { success: false, error: 'Avaliação não encontrada' },
        { status: 404 }
      )
    }

    // Buscar a avaliação atualizada
    const updatedEvaluation = await prisma.userEvaluation.findFirst({
      where: { userId: id },
      orderBy: { evaluationDate: 'desc' }
    })

    return NextResponse.json({ 
      success: true, 
      data: {
        ...updatedEvaluation,
        overallScore: Number(updatedEvaluation?.overallScore)
      }
    })
  } catch (error) {
    console.error('Erro ao atualizar avaliação do usuário:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
